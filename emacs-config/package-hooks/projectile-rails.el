(setq helm-projectile-rails-macro-file-name load-file-name)
(with-eval-after-load 'projectile-rails

  (defun projectile-rails-find-api ()
    (interactive)
    (projectile-rails-find-resource
     "API: "
     '(("app/api/" "/api/\\(.+?\\)\\(_api\\)?\\.rb$"))
     "app/api/${filename}_api.rb"))

  (defun rails-buffer-candidates-function (type)
    (let ((result '()))
      (dolist (buf-name helm-projectile-buffers-list-cache result)
        (let* ((buf (get-buffer buf-name))
               (buf-file-name (buffer-file-name buf))
               (rails-root (projectile-rails-root)))
          (if (and buf-file-name rails-root (string-match (format "^%sapp/%s/" rails-root type) buf-file-name))
              (add-to-list 'result buf-name t))
          )
        )))

  (defun build-rails-source (type)
    (let* (choices)
      (cond
       ((eq type 'models) (setq choices (lambda ()
                                          (let (result)
                                            (maphash (lambda (k v) (add-to-list 'result (cons k v) t)) (projectile-rails-choices '(("app/models/" "\\(.+\\)\\.rb$")))) result))))

       ((eq type 'views) (setq choices (lambda ()
                                         (let (result)
                                           (maphash (lambda (k v) (add-to-list 'result (cons k v) t)) (projectile-rails-choices `(("app/views/" ,(concat "\\(.+\\)" projectile-rails-views-re))))) result))))
       ((eq type 'controllers) (setq choices (lambda ()
                                               (let (result)
                                                 (maphash (lambda (k v) (add-to-list 'result (cons k v) t)) (projectile-rails-choices '(("app/controllers/" "\\(.+\\)_controller\\.rb$")))) result))))
        ((eq type 'apis) (setq choices (lambda ()
                                                (let (result)
                                                  (maphash (lambda (k v) (add-to-list 'result (cons k v) t)) (projectile-rails-choices '(("app/api/" "\\(.+\\)_api\\.rb$")))) result))))
        ((eq type 'jobs) (setq choices (lambda ()
                                                (let (result)
                                                  (maphash (lambda (k v) (add-to-list 'result (cons k v) t)) (projectile-rails-choices '(("app/jobs/" "\\(.+\\)\\.rb$")))) result)))))
      (helm-build-sync-source (format "Rails %s files: " (symbol-name type)) :candidates choices :fuzzy-match t
                              :action (lambda (file) (find-file (concat (projectile-rails-root) file))))
      ))

  (load-file (format "%s/projectile-rails.macro" (file-name-directory helm-projectile-rails-macro-file-name)))

  (defvar helm-source-rails-models-buffers-list (helm-make-source "Rails models buffers" 'helm-source-rails-models-buffer))
  (defvar helm-source-rails-views-buffers-list (helm-make-source "Rails views buffers" 'helm-source-rails-views-buffer))
  (defvar helm-source-rails-controllers-buffers-list (helm-make-source "Rails controllers buffers" 'helm-source-rails-controllers-buffer))
  (defvar helm-source-rails-apis-buffers-list (helm-make-source "Rails APIs buffers" 'helm-source-rails-apis-buffer))
  (defvar helm-source-rails-jobs-buffers-list (helm-make-source "Rails jobs buffers" 'helm-source-rails-jobs-buffer))
  (setq helm-source-rails-models-files-list (build-rails-source 'models))
  (setq helm-source-rails-controllers-files-list (build-rails-source 'controllers))
  (setq helm-source-rails-views-files-list (build-rails-source 'views))
  (setq helm-source-rails-apis-files-list (build-rails-source 'apis))
  (setq helm-source-rails-jobs-files-list (build-rails-source 'jobs))
  (helm-projectile-command "switch-to-rails-models-buffer" '(helm-source-rails-models-buffers-list helm-source-rails-models-files-list) "Switch to Rails models buffer/file: ")
  (helm-projectile-command "switch-to-rails-views-buffer" '(helm-source-rails-views-buffers-list helm-source-rails-views-files-list) "Switch to Rails views buffer/file: ")
  (helm-projectile-command "switch-to-rails-controllers-buffer" '(helm-source-rails-controllers-buffers-list helm-source-rails-controllers-files-list) "Switch to Rails controllers buffer/file: ")
  (helm-projectile-command "switch-to-rails-apis-buffer" '(helm-source-rails-apis-buffers-list helm-source-rails-apis-files-list) "Switch to Rails APIs buffer/file: ")
  (helm-projectile-command "switch-to-rails-jobs-buffer" '(helm-source-rails-jobs-buffers-list helm-source-rails-jobs-files-list) "Switch to Rails jobs buffer/file: ")
  (define-key projectile-rails-mode-map (kbd "s-r s-m") 'helm-projectile-switch-to-rails-models-buffer)
  (define-key projectile-rails-mode-map (kbd "s-r s-v") 'helm-projectile-switch-to-rails-views-buffer)
  (define-key projectile-rails-mode-map (kbd "s-r s-c") 'helm-projectile-switch-to-rails-controllers-buffer)
  (define-key projectile-rails-mode-map (kbd "s-r s-a") 'helm-projectile-switch-to-rails-apis-buffer)
  (define-key projectile-rails-mode-map (kbd "s-r j") 'helm-projectile-switch-to-rails-jobs-buffer)
  (dolist (mode '(ruby-mode))
    (spacemacs/set-leader-keys-for-major-mode mode
      "rfA" 'projectile-rails-find-api
      "rfJ" 'projectile-rails-find-job))
  (dolist (pair '(
                  ("s-r fA" . projectile-rails-find-api)
                  ("s-r fJ" . projectile-rails-find-job)
                  ("s-r fa" . projectile-rails-find-locale)
                  ("s-r fc" . projectile-rails-find-controller)
                  ("s-r fe" . projectile-rails-find-environment)
                  ("s-r ff" . projectile-rails-find-feature)
                  ("s-r fh" . projectile-rails-find-helper)
                  ("s-r fi" . projectile-rails-find-initializer)
                  ("s-r fj" . projectile-rails-find-javascript)
                  ("s-r fl" . projectile-rails-find-lib)
                  ("s-r fm" . projectile-rails-find-model)
                  ("s-r fn" . projectile-rails-find-migration)
                  ("s-r fo" . projectile-rails-find-log)
                  ("s-r fp" . projectile-rails-find-spec)
                  ("s-r fr" . projectile-rails-find-rake-task)
                  ("s-r fs" . projectile-rails-find-stylesheet)
                  ("s-r ft" . projectile-rails-find-test)
                  ("s-r fu" . projectile-rails-find-fixture)
                  ("s-r fv" . projectile-rails-find-view)
                  ("s-r fy" . projectile-rails-find-layout)
                  ("s-r f@" . projectile-rails-find-mailer)
                  ("s-r gc" . projectile-rails-find-current-controller)
                  ("s-r gd" . projectile-rails-goto-schema)
                  ("s-r ge" . projectile-rails-goto-seeds)
                  ("s-r gh" . projectile-rails-find-current-helper)
                  ("s-r gj" . projectile-rails-find-current-javascript)
                  ("s-r gg" . projectile-rails-goto-gemfile)
                  ("s-r gm" . projectile-rails-find-current-model)
                  ("s-r gn" . projectile-rails-find-current-migration)
                  ("s-r gp" . projectile-rails-find-current-spec)
                  ("s-r gr" . projectile-rails-goto-routes)
                  ("s-r gs" . projectile-rails-find-current-stylesheet)
                  ("s-r gt" . projectile-rails-find-current-test)
                  ("s-r gu" . projectile-rails-find-current-fixture)
                  ("s-r gv" . projectile-rails-find-current-view)
                  ("s-r gz" . projectile-rails-goto-spec-helper)
                  ("s-r g." . projectile-rails-goto-file-at-point)
                  ("s-r G" . projectile-rails-generate)
                  ("s-r r:" . projectile-rails-rake)
                  ("s-r Rx" . projectile-rails-extract-region)))
    (define-key projectile-rails-mode-map (kbd (car pair)) (cdr pair)))


  (define-button-type 'help-open-file
    :supertype 'help-xref
    'help-function 'org-open-file
    'help-echo (purecopy "mouse-2, RET: open file"))

  (defun lx/get-rails-locale-files ()
    (directory-files (format "%s/config/locales/" (projectile-project-root)) t "\\.ya?ml$"))

  (defun lx/get-rails-locale-message (key)
    (--map
     (let ((locale (car (s-split "\\." (car (s-match "..\\.ya?ml$" it))))))
       (cons it (format "%s" (shell-command-to-string (format "~/bin/yamlq '%s' '%s.%s'" it locale key)))))
     (lx/get-rails-locale-files)))

  (defun lx/find-rails-locale-message ()
    (interactive)
    (with-help-window (help-buffer)
      (dolist (item (lx/get-rails-locale-message (thing-at-point 'filename t)))
        (when (not (s-blank? (cdr item)))
          (with-current-buffer (help-buffer)
            (help-insert-xref-button (car item) 'help-open-file (car item) t nil (cdr item)))
          (princ (format ":  %s\n\n" (cdr item)))))))
  (spacemacs/set-leader-keys-for-minor-mode 'projectile-rails-mode "d" #'lx/find-rails-locale-message))

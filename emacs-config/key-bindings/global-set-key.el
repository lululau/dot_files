(global-unset-key (kbd "s-q"))
(global-unset-key (kbd "<f10>"))
(global-set-key (kbd "s-l") 'evil-avy-goto-line)
(global-set-key (kbd "<s-S-return>") 'spacemacs/toggle-maximize-buffer)
(global-set-key (kbd "s-t") 'split-window-right-and-focus)
(global-set-key (kbd "s-T") 'split-window-below-and-focus)
(global-set-key (kbd "s-O") 'helm-projectile-find-file)
(global-set-key (kbd "s-R") 'spacemacs/safe-revert-buffer)
;; (global-set-key (kbd "s-O") 'spacemacs/helm-find-files-recursively)
(global-set-key (kbd "s-o") 'lx/helm-find-project-files)
(global-set-key (kbd "s-f") 'spacemacs/helm-find-files)
(global-set-key (kbd "M-s-f") 'helm-find)
(global-set-key (kbd "C-x C-f") 'spacemacs/helm-find-files)
(global-set-key (kbd "s-F") 'helm-locate)
(global-set-key (kbd "s-B") 'lx/switch-to-buffer)
(global-set-key (kbd "s-b") 'lx/switch-to-project-or-all-buffer)
(global-set-key (kbd "s-L") 'spacemacs/helm-perspectives)
(global-set-key (kbd "M-.") 'company-complete)
(global-set-key (kbd "s-:") #'(lambda () (interactive) (lx/run-in-zsh-vterm "tmux-attach-or-create main" "*tmux-main*")))
(global-set-key (kbd "s-;") #'(lambda () (interactive)
                                (let* ((remote-host (lx/get-remote-buffer-host)))
                                  (if remote-host
                                      (let* ((process-environment '("SSH_INTERACTIVE=1"))
                                             (cmd (format "ssh %s" remote-host))
                                             (buffer-name (format "*zsh-vterm-ssh-%s*" remote-host)))
                                        (lx/run-ssh-in-zsh-vterm cmd buffer-name (plist-put nil :host remote-host) nil))
                                    (let* ((project-root (projectile-project-root)))
                                      (if project-root
                                          (let* ((cmd (format "tmux-attach-or-create %s %s" project-root project-root))
                                                 (buffer-name (format "*tmux-%s*" project-root)))
                                            (lx/run-in-zsh-vterm cmd buffer-name)
                                            (with-current-buffer buffer-name
                                              (setq default-directory project-root)))
                                        (lx/run-in-zsh-vterm "tmux-attach-or-create main" "*tmux-main*")))))))

(global-set-key (kbd "s-\"") #'(lambda () (interactive) (lx/run-in-zsh-vterm "tmux-attach-or-create main" "*tmux-main*" nil 'popup)))
(global-set-key (kbd "s-'") #'(lambda () (interactive)
                                (if (eq major-mode 'zsh-vterm-mode)
                                    (if (and (eq 1 (length (window-list))) (eq (selected-window) (car (window-list))))
                                        (bury-buffer)
                                      (delete-window))
                                  (let* ((remote-host (lx/get-remote-buffer-host)))
                                    (if remote-host
                                        (let* ((process-environment '("SSH_INTERACTIVE=1"))
                                               (cmd (format "ssh %s" remote-host))
                                               (buffer-name (format "*zsh-vterm-ssh-%s*" remote-host)))
                                          (lx/run-ssh-in-zsh-vterm cmd buffer-name (plist-put nil :host remote-host) nil 'popup))
                                      (let* ((project-root (projectile-project-root)))
                                        (if project-root
                                            (let* ((cmd (format "tmux-attach-or-create %s %s" project-root project-root))
                                                   (buffer-name (format "*tmux-%s*" project-root)))
                                              (lx/run-in-zsh-vterm cmd buffer-name nil 'popup)
                                              (with-current-buffer buffer-name
                                                (setq default-directory project-root)))
                                          (lx/run-in-zsh-vterm "tmux-attach-or-create main" "*tmux-main*" nil 'popup))))))))

(global-set-key (kbd "s-r s-;") #'(lambda () (interactive) (lx/run-in-pry-vterm (cdr (assoc "pry" inf-ruby-implementations)) "*pry*")))
(global-set-key (kbd "s-[") 'previous-buffer)
(global-set-key (kbd "s-]") 'next-buffer)
(global-set-key (kbd "s-/") 'evilnc-comment-or-uncomment-lines)
(global-set-key (kbd "s-\\") 'lx/switch-to-previous-perp)
(global-set-key (kbd "s-M-'") #'(lambda () (interactive) (call-interactively 'split-window-right-and-focus) (vterm "/bin/zsh")))

(global-set-key (kbd "s-n") '(lambda () (interactive) (switch-to-buffer-other-window (generate-new-buffer "*Untitled*")) (undo-tree-mode)))
(global-set-key (kbd "s-N") '(lambda () (interactive) (switch-to-buffer (generate-new-buffer "*Untitled*")) (undo-tree-mode)))
(global-set-key (kbd "s-w") 'lx/delete-window-or-bury-buffer)
(global-set-key (kbd "s-W") '(lambda () (interactive) (kill-this-buffer) (delete-window)))
(global-set-key (kbd "s-D") 'spacemacs/kill-this-buffer)
(global-set-key (kbd "M-s-n") '(lambda () (interactive) (make-frame-command)))
(global-set-key (kbd "M-s-w") 'delete-frame)
;; (global-set-key (kbd "s-C") 'bzg-big-fringe-mode)
(global-set-key (kbd "s-g") #'(lambda (arg)
                                (interactive "P")
                                (if arg
                                    (progn
                                      (require 'magit-mode)
                                      (let ((magit-buf (--find (s-starts-with? "magit:" (buffer-name it)) (magit-mode-get-buffers))))
                                        (if magit-buf (switch-to-buffer magit-buf) (magit-status))))
                                  (magit-status))))
(global-set-key (kbd "s-r c") #'(lambda (arg)
                                  (interactive "P")
                                  (let ((console (get-buffer (format "**%srailsconsole**" (projectile-project-name)))))
                                    (if (and arg console)
                                        (switch-to-buffer console)
                                      (call-interactively 'projectile-bundler-console)))))
;; (global-set-key (kbd "s-r s") 'projectile-rails-server)
(global-set-key (kbd "s-r s") 'vterm-rails/rails-server)
(global-set-key (kbd "s-r d") 'vterm-rails/rails-dev)
(global-set-key (kbd "s-r S") 'vterm-rails/sidekiq)
(global-set-key (kbd "s-r s-v") 'rvm-activate-corresponding-ruby)
(global-set-key (kbd "s-r /" ) 'lx/helm-ag-search-pry-breakpoints)
(global-set-key (kbd "s-r s-a") #'(lambda (arg) (interactive "P") (let ((console (get-buffer (format "*%s-arql*" (projectile-project-name)))))
                                                           (if console
                                                               (pop-to-buffer console)
                                                             (message "Buffer `%s' not found." console)))))
(global-set-key (kbd "s-r q") #'(lambda () (interactive)
                                  (if (bound-and-true-p arql-env)
                                      (lx/run-in-pry-vterm (format "~/.rvm/gems/ruby-3.2.0/bin/arql -e %s" arql-env) (format "*arql-%s*" arql-env) (projectile-project-root))
                                    (lx/run-in-pry-vterm "~/.rvm/gems/ruby-3.2.0/bin/arql -e lcldevb" "*arql-lcldevb*" (projectile-project-root) t))))
(global-set-key (kbd "s-r j") #'(lambda () (interactive) (lx/run-in-vterm "/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/jshell --class-path $HOME/.m2/final/ktjr-common.jar --start $HOME/.config/default.jsh" "*jshell*")))
(global-set-key (kbd "s-r a") #'(lambda () (interactive) (lx/run-in-vterm "as.sh" "*arthas*" default-directory)))
(global-set-key (kbd "s-r k") #'(lambda () (interactive) (lx/run-in-vterm "~/bin/k9s" "*k9s*" nil t)))
(global-set-key (kbd "s-r h") #'(lambda () (interactive) (lx/run-in-vterm "htop" "*htop*" default-directory t)))
(global-set-key (kbd "s-r 0") #'(lambda () (interactive) (helm-zsh-vterm-ssh-run "lx.kt")))
(global-set-key (kbd "s-r 1") #'(lambda () (interactive) (helm-zsh-vterm-ssh-run "xym")))
(global-set-key (kbd "s-r 2") #'(lambda () (interactive) (helm-zsh-vterm-ssh-run "dev42")))
(global-set-key (kbd "s-r 3") #'(lambda () (interactive) (helm-zsh-vterm-ssh-run "lcl.devb")))
(global-set-key (kbd "s-r 4") #'(lambda () (interactive) (helm-zsh-vterm-ssh-run "ceres.devb")))
(global-set-key (kbd "s-r 5") #'(lambda () (interactive) (helm-zsh-vterm-ssh-run "ll.devb")))
(global-set-key (kbd "s-r l 1") #'(lambda () (interactive) (helm-vterm-vrl-run-auto-function "ceres-devb-web")))
(global-set-key (kbd "s-r l 2") #'(lambda () (interactive) (helm-vterm-vrl-run-auto-function "ceres-devb-job")))
(global-set-key (kbd "s-r l 3") #'(lambda () (interactive) (helm-vterm-vrl-run-auto-function "ceres-devb-api")))
(global-set-key (kbd "s-r l 4") #'(lambda () (interactive) (helm-vterm-vrl-run-auto-function "lcl-devb-admin")))
(global-set-key (kbd "s-r p") #'helm-vterm-prize)
(global-set-key (kbd "s-r s-p") #'(lambda () (interactive) (lx/run-in-vterm "~/Library/Python/3.11/bin/ptipython" "*ptpython*")))
(global-set-key (kbd "s-r s-r s-p") #'vterm-mitmproxy-transparent-proxy)
(global-set-key (kbd "s-r s-r p") #'vterm-mitmproxy-normal-proxy)
(global-set-key (kbd "s-r s-s") #'helm-zsh-vterm-ssh)
(global-set-key (kbd "s-r s-q") #'helm-pry-vterm-arql)
(global-set-key (kbd "s-r s-l") #'helm-vterm-vrl)
(global-set-key (kbd "s-r m m") #'helm-vterm-maven-deploy)
(global-set-key (kbd "s-r m d") #'helm-vterm-maven-deploy)
(global-set-key (kbd "s-r m c") #'helm-vterm-maven-deploy-current-artifact)
(global-set-key (kbd "s-r m p") #'helm-vterm-maven-deploy-parent-artifact)
(global-set-key (kbd "s-r m t") #'helm-vterm-maven-deps-tree)
(global-set-key (kbd "s-r m r") #'helm-vterm-maven-deps-resolve)
(global-set-key (kbd "s-r m u") #'vterm-maven-update-local-artifact)
(global-set-key (kbd "s-r m k") #'vterm-maven-kill-local-artifact)
(global-set-key (kbd "s-r s-j") #'helm-vterm-jenkins)
(global-set-key (kbd "s-r s-r bw") #'(lambda () (interactive) (let ((vterm-kill-buffer-on-exit t)) (lx/run-in-vterm "bandwhich" "*vterm-bandwhich*" nil t))))
(global-set-key (kbd "s-r s-r bu") #'(lambda () (interactive) (let ((vterm-kill-buffer-on-exit nil)) (lx/run-in-vterm "bash -c \"brew update; brew upgrade ; brew post-update ; brew cleanup ; brew list --casks | xargs -I {} brew upgrade --cask {}; brew post-update; brew cleanup;\"" "*vterm-cmd-brew-upgrade-cleanup*" nil t))))
(global-set-key (kbd "s-r s-r lp") #'(lambda () (interactive) (let ((vterm-kill-buffer-on-exit nil)) (lx/run-in-vterm "sudo lsof -Pn -iTCP -sTCP:LISTEN" "*vterm-cmd-listening-ports*" default-directory t))))
(global-set-key (kbd "s-r s-r df") #'(lambda () (interactive) (let ((vterm-kill-buffer-on-exit nil)) (lx/run-in-vterm "sudo duf --only local" "*vterm-cmd-duf*" default-directory t))))
(global-set-key (kbd "s-r s-r j") #'(lambda () (interactive) (let ((vterm-kill-buffer-on-exit t)) (lx/run-in-vterm "jira issue list -q 'assignee = currentUser() AND status not in (CLOSE, closed, Resolved, \"ON HOLD\") and project != XYC'" "*vterm-cmd-jira-cli*" nil t))))
(global-set-key (kbd "s-r s-r gs") #'(lambda () (interactive) (let* ((vterm-kill-buffer-on-exit nil)
                                                                     (root (projectile-project-root))
                                                                     (root-base-name (car (last (split-string root "/" t))))
                                                                     (buffer-name (format "*vterm-cmd-git-multi-status-%s*" root-base-name)))
                                                                (lx/run-in-vterm "git multi-status" buffer-name root t))))
(global-set-key (kbd "s-r s-r gb") #'(lambda () (interactive) (let* ((vterm-kill-buffer-on-exit nil)
                                                                     (root (projectile-project-root))
                                                                     (root-base-name (car (last (split-string root "/" t))))
                                                                     (buffer-name (format "*vterm-cmd-git-multi-branch-%s*" root-base-name)))
                                                                (lx/run-in-vterm "git multi-branch" buffer-name root t))))
(global-set-key (kbd "s-r s-r gl") #'(lambda () (interactive) (let* ((vterm-kill-buffer-on-exit nil)
                                                                    (root (projectile-project-root))
                                                                    (root-base-name (car (last (split-string root "/" t))))
                                                                    (buffer-name (format "*vterm-cmd-git-multi-pull-%s*" root-base-name)))
                                                                (lx/run-in-vterm "git multi-pull" buffer-name root t))))
(global-set-key (kbd "s-r s-r ga") #'(lambda (arg) (interactive "P") (let* ((vterm-kill-buffer-on-exit nil)
                                                                     (buffer-name "*vterm-cmd-git-remote-branches*")
                                                                     (remote (if arg (magit-read-remote "Remote") "")))
                                                                (lx/run-in-vterm (format "git remote-branches %s" remote) buffer-name (magit-toplevel) t))))
(global-set-key (kbd "s-r s-r ad") #'arthas-class-reload-docker)
(global-set-key (kbd "s-r s-r ak") #'arthas-class-reload-k8s)
(global-set-key (kbd "s-r b") #'helm-vterm-buffers)

(global-set-key (kbd "s-u") 'universal-argument)
(define-key universal-argument-map (kbd "s-u") 'universal-argument-more)
(global-set-key [M-s-tab] #'spacemacs/alternate-buffer-in-persp)
;; (global-set-key [M-S-tab] #'projectile-project-switch-to-alternate-buffer)
(global-set-key [M-S-tab] #'(lambda () (interactive) (switch-to-buffer (nth 2 (projectile-project-buffers)))))

(global-set-key (kbd "C-g") 'lx/keyboard-quit)
(global-set-key [M-tab] 'spacemacs/alternate-buffer)
(global-set-key (kbd "C-M-i") 'spacemacs/alternate-buffer)
(unless (display-graphic-p) (global-set-key (kbd "C-M-i") 'spacemacs/alternate-buffer) (global-set-key (kbd "<f10>") 'spacemacs/alternate-buffer))
(global-set-key (kbd "<f5>") #'(lambda () (interactive) (unless (boundp 'ggtags-mode) (ggtags-mode)) (projectile-regenerate-tags)))
(global-set-key (kbd "M-@") 'set-mark-command)
(global-set-key (kbd "s-m") 'set-mark-command)
(global-set-key (kbd "C-x s-m") 'pop-global-mark)
(global-set-key (kbd "<f1>") #'(lambda () (interactive) (condition-case nil (neotree-find-project-root) (error (neotree-toggle)))))
(global-set-key (kbd "<S-f1>") #'(lambda () (interactive) (neotree-toggle)))
(global-set-key [mouse-4] '(lambda () (interactive) (scroll-down 1)))
(global-set-key [mouse-5] '(lambda () (interactive) (scroll-up 1)))

(global-set-key (kbd "M-h") #'evil-window-left)
(global-set-key (kbd "M-l") #'evil-window-right)
(global-set-key (kbd "M-j") #'lx/window-down-fallback-to-switch-frame)
(global-set-key (kbd "M-k") #'lx/window-up-fallback-to-switch-frame)
(global-set-key (kbd "M-H") #'lx/window-move-far-left)
(global-set-key (kbd "M-J") #'lx/window-move-very-bottom)
(global-set-key (kbd "M-K") #'lx/window-move-very-top)
(global-set-key (kbd "M-L") #'lx/window-move-far-right)

(global-set-key (kbd "s-M") #'helm-mu)

(global-set-key (kbd "s-0") 'spacemacs/persp-switch-to-0)
(global-set-key (kbd "s-1") 'spacemacs/persp-switch-to-1)
(global-set-key (kbd "s-2") 'spacemacs/persp-switch-to-2)
(global-set-key (kbd "s-3") 'spacemacs/persp-switch-to-3)
(global-set-key (kbd "s-4") 'spacemacs/persp-switch-to-4)
(global-set-key (kbd "s-5") 'spacemacs/persp-switch-to-5)
(global-set-key (kbd "s-6") 'spacemacs/persp-switch-to-6)
(global-set-key (kbd "s-7") 'spacemacs/persp-switch-to-7)
(global-set-key (kbd "s-8") 'spacemacs/persp-switch-to-8)
(global-set-key (kbd "s-9") 'spacemacs/persp-switch-to-9)
(global-set-key (kbd "s-{") 'persp-prev)
(global-set-key (kbd "s-}") 'persp-next)

(global-set-key (kbd "M-0") 'winum-select-window-0)
(global-set-key (kbd "M-1") 'winum-select-window-1)
(global-set-key (kbd "M-2") 'winum-select-window-2)
(global-set-key (kbd "M-3") 'winum-select-window-3)
(global-set-key (kbd "M-4") 'winum-select-window-4)
(global-set-key (kbd "M-5") 'winum-select-window-5)
(global-set-key (kbd "M-6") 'winum-select-window-6)
(global-set-key (kbd "M-7") 'winum-select-window-7)
(global-set-key (kbd "M-8") 'winum-select-window-8)
(global-set-key (kbd "M-9") 'winum-select-window-9)

(global-set-key (kbd "C-M-s-)") 'winum-select-window-0)
(global-set-key (kbd "C-M-s-!") 'winum-select-window-1)
(global-set-key (kbd "C-M-s-@") 'winum-select-window-2)
(global-set-key (kbd "C-M-s-#") 'winum-select-window-3)
(global-set-key (kbd "C-M-s-$") 'winum-select-window-4)
(global-set-key (kbd "C-M-s-%") 'winum-select-window-5)
(global-set-key (kbd "C-M-s-^") 'winum-select-window-6)
(global-set-key (kbd "C-M-s-&") 'winum-select-window-7)
(global-set-key (kbd "C-M-s-*") 'winum-select-window-8)
(global-set-key (kbd "C-M-s-(") 'winum-select-window-9)

(global-set-key (kbd "<f12>") #'lx/open-mail-custom-layout-or-mu4e-main)

(global-set-key (kbd "M-`") 'neotree-show)

(global-set-key (kbd (if (display-graphic-p) "<C-return>" "C-RET")) #'spacemacs/jump-to-definition)
(global-set-key (kbd (if (display-graphic-p) "<s-return>" "s-RET")) #'spacemacs/jump-to-definition-other-window)

(global-set-key (kbd "s-j") #'(lambda () (interactive) (evil-next-line 10)))
(global-set-key (kbd "s-k") #'(lambda () (interactive) (evil-previous-line 10)))

;; s-i
(global-set-key (kbd "s-i s-o") 'lx/find-or-create-projectile-snippet-org)
(global-set-key (kbd "s-i s-p") 'lx/find-or-create-projectile-request-org)
(global-set-key (kbd "s-i s-q") 'lx/find-or-create-projectile-sql-org)
(global-set-key (kbd "s-i s-m") 'lx/toggle-global-evil-mc-mode)
(global-set-key (kbd "s-i s-r") 'lx/evil-mc-make-cursors-by-regexp)
(global-set-key (kbd "s-i p") 'lx/evil-mc-make-cursors-on-paragraph)
(global-set-key (kbd "s-i r") 'lx/evil-mc-make-cursors-on-region)
(global-set-key (kbd "s-i s-t") 'insert-translated-name-replace)
(global-set-key (kbd "s-i s-c") 'org-capture)
(global-set-key (kbd "s-i s-a") 'org-agenda-list)
(global-set-key (kbd "s-i s-b") 'helm-filtered-bookmarks)
(global-set-key (kbd "s-i s-i") 'spacemacs/helm-jump-in-buffer)

;; s-p
(global-unset-key (kbd "s-p"))
(global-set-key (kbd "s-p s-p") 'helm-projectile-switch-project)
(global-set-key (kbd "s-p s-r") 'projectile-dired)
(global-set-key (kbd "s-p s-s") 'lx/helm-persp-replace-project)
(global-set-key (kbd "s-p s-a") 'spacemacs/helm-persp-switch-project)
(global-set-key (kbd "s-p s-o") 'lx/helm-projectile-open-projects)
(global-set-key (kbd "s-p s-u") 'lx/helm-projectile-other-open-projects)
(global-set-key (kbd "s-p s-l") 'spacemacs/helm-perspectives)
(global-set-key (kbd "s-p s-t") '(lambda (in-other-window) (interactive "P") (let ((current-persp-project (get-current-persp-project)))
                                                            (when current-persp-project (if in-other-window (find-file-other-window current-persp-project)(find-file current-persp-project))))))
(global-set-key (kbd "s-e") '(lambda (in-other-window) (interactive "P") (let ((current-persp-project (get-current-persp-project)))
                                                                           (when current-persp-project (if in-other-window (find-file-other-window current-persp-project)(find-file current-persp-project))))))
(global-set-key (kbd "s-p s-g") '(lambda (in-other-window) (interactive "P") (if in-other-window (find-file-other-window (magit-toplevel))(find-file (magit-toplevel)))))

(global-set-key (kbd "s-<backspace>") 'evil-change-whole-line)

(global-set-key (kbd "s-s")
                (lambda ()
                  (interactive)
                  (call-interactively (key-binding "\C-x\C-s"))))

(global-set-key (kbd "M-s-b") 'helm-cwd-buffers)
(global-set-key (kbd "s-V") 'lx/indent-paste)

(global-set-key (kbd "s-i s-j s-j") #'org-jira-cleanup-get-issues-from-custom-jql)
(global-set-key (kbd "s-i s-j j") #'org-jira-get-issues-from-custom-jql)
(global-set-key (kbd "s-i s-j s-p") #'org-jira-progress-issue-to-resolved)
(global-set-key (kbd "s-i s-j s-b") #'org-jira-browse-issue)
(global-set-key (kbd "s-i s-j s-u") #'org-jira-update-issue)
(global-set-key (kbd "s-i s-j s-r") #'org-jira-refresh-issue)
(global-set-key (kbd "s-i s-j s-a") #'org-jira-assign-issue)
(global-set-key (kbd "s-i s-j p") #'org-jira-progress-issue)
(global-set-key (kbd "s-i s-j ib") #'org-jira-browse-issue)
(global-set-key (kbd "s-i s-j ig") #'org-jira-get-issues)
(global-set-key (kbd "s-i s-j ih") #'org-jira-get-issues-headonly)
(global-set-key (kbd "s-i s-j if") #'org-jira-get-issues-from-filter-headonly)
(global-set-key (kbd "s-i s-j iu") #'org-jira-update-issue)
(global-set-key (kbd "s-i s-j iw") #'org-jira-progress-issue)
(global-set-key (kbd "s-i s-j ir") #'org-jira-refresh-issue)
(global-set-key (kbd "s-i s-j ic") #'org-jira-create-issue)
(global-set-key (kbd "s-i s-j iy") #'org-jira-copy-current-issue-key)
(global-set-key (kbd "s-i s-j sc") #'org-jira-create-subtask)
(global-set-key (kbd "s-i s-j sg") #'org-jira-get-subtasks)
(global-set-key (kbd "s-i s-j cu") #'org-jira-update-comment)
(global-set-key (kbd "s-i s-j tj") #'org-jira-todo-to-jira)

(global-set-key (kbd "s-i TAB") #'(lambda () (interactive) (imenu-list-minor-mode 1)))

(global-set-key (kbd "s-?") #'lx/clojure-repl)

(global-set-key (kbd "s-=") #'lx/set-monospaced-font/increase-font-size)
(global-set-key (kbd "s--") #'lx/set-monospaced-font/decrease-font-size)

(global-set-key (kbd "TAB") #'lx/tab)
(global-set-key (kbd "M-\\") 'copilot-complete)
(global-set-key (kbd "M-]") 'copilot-next-completion)
(global-set-key (kbd "M-f") 'lx/copilot-accept-or-forward-word)
(global-set-key (kbd "C-n") 'lx/copilot-accept-or-next-line)
;; (global-set-key (kbd "M-[") 'copilot-previous-completion) ;; Comment out this kbd due to confliction with S-TAB in terminal
(global-set-key (kbd "<backtab>") #'copilot-accept-completion)
(global-set-key (kbd "M-?") 'all-buffer-completion)
(global-set-key (kbd "s-H") 'dash-at-point)
